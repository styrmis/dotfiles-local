Following https://huytd.github.io/emacs-from-scratch.html

* Appearance
#+begin_src emacs-lisp

;; Minimal UI
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)

(add-to-list 'default-frame-alist '(font . "Source Code Pro-13"))
(add-to-list 'default-frame-alist '(height . 81))
(add-to-list 'default-frame-alist '(width . 157))

;; Match titlebar colour to theme on Emacs >= 26 on OSX
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
#+end_src

* Autosave and file tracking
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))

;; Automatically update buffers when files change on disk
(global-auto-revert-mode t)
#+end_src
* Packages
** Sources
#+begin_src emacs-lisp
;; Package configs
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
			 ("gnu"   . "http://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("melpa-stable" . "http://stable.melpa.org/packages/")))
(package-initialize)

;; Bootstrap `use-package`
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+end_src
** Installed packages
#+begin_src emacs-lisp
;; Vim mode
(setq evil-want-C-u-scroll t)

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-org
  :ensure t)

(use-package evil-escape
  :ensure t
  :init
  (setq-default evil-escape-key-sequence "jk")
  :config
  (evil-escape-mode 1))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

(use-package all-the-icons :ensure t)

;; Theme
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))

#+end_src
*** Helm
#+BEGIN_SRC emacs-lisp
  ;; Helm
  (use-package helm
    :ensure t
    :init
    (setq helm-M-x-fuzzy-match t
          helm-mode-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-locate-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-candidate-number-list 150
          helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t
          helm-echo-input-in-header-line t
          helm-autoresize-max-height 0
          helm-autoresize-min-height 20)
    :config
    (helm-mode 1))

  (global-set-key (kbd "M-x") 'helm-M-x)

  (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

  (global-set-key (kbd "C-x b") 'helm-mini)

  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC
*** Rest
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)

(use-package git-gutter
  :ensure t)

;; Projectile
(use-package projectile
  :ensure t
  :init
  (setq projectile-require-project-root nil)
  :config
  (projectile-mode 1))

;; NeoTree
(use-package neotree
  :ensure t
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
* Key bindings
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "M-3") (kbd "#"))

;; Which Key
(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))

;; Custom keybinding
(use-package general
  :ensure t
  :config (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "M-SPC"
	   ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
	   "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
	   "SPC" '(helm-M-x :which-key "M-x")
	   "fed" '(lambda() (interactive)(find-file "~/.emacs.d/init.el"))
	   "pf"  '(helm-find-files :which-key "find files")
	   ;; Buffers
	   "bb"  '(helm-buffers-list :which-key "buffers list")
	   ;; Window
	   "wl"  '(windmove-right :which-key "move right")
	   "wh"  '(windmove-left :which-key "move left")
	   "wk"  '(windmove-up :which-key "move up")
	   "wj"  '(windmove-down :which-key "move bottom")
	   "w/"  '(split-window-right :which-key "split right")
	   "w-"  '(split-window-below :which-key "split bottom")
	   "wx"  '(delete-window :which-key "delete window")
	   ;; Others
	   "at"  '(ansi-term :which-key "open terminal")
	   "]h"  '(git-gutter:next-hunk :which-key "next hunk")
	   "[h"  '(git-gutter:previous-hunk :which-key "previous hunk")
	   ))
#+end_src
** Magit
#+begin_src emacs-lisp
;; Magit global key bindings
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)

(global-git-gutter-mode +1)
#+end_src

* Org-mode
** Base configuration
#+begin_src emacs-lisp
;; Org mode global key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)

(customize-set-variable 'org-directory "~/org")
(customize-set-variable 'org-agenda-files (list org-directory))

(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates '(("t" "Todo [inbox]" entry
             (file+headline "~/Dropbox/org/inbox.org" "Tasks")
             "* TODO %i%?")
            ("T" "Tickler" entry
             (file+headline "~/Dropbox/org/tickler.org" "Tickler")
             "* %i%? \n %U")
            ("w" "Weekly Journal" entry (file+olp+datetree "~/Dropbox/org/weekly-journal.org")
             "* %?" :tree-type week)
            ("m" "Monthly Journal" entry (file+olp+datetree "~/Dropbox/org/monthly-journal.org")
             "** %?")
            ))

(setq org-modules '(org-habit))

(setq org-refile-targets '((nil :maxlevel . 4)
			   (org-agenda-files :maxlevel . 4)))
(setq org-outline-path-complete-in-steps nil)         ; Use helm for completion
(setq org-refile-use-outline-path 'file)              ; Show full paths for refiling

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "STARTED(s!)" "WAIT(w@/!)" "DELEGATED(g@/!)" "|" "DONE(d!)" "CANCELLED(l@)")))

(setq org-log-into-drawer t)

(setq org-catch-invisible-edits 'smart)

;; Save all org files after refiling or archiving
(advice-add 'org-refile :after 'org-save-all-org-buffers)
(advice-add 'org-archive-subtree :after 'org-save-all-org-buffers)

(setq org-startup-indented t)

(add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** Plugins
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda ()
      (org-bullets-mode 1))))

  (use-package org-beautify-theme
    :ensure t
    :init)
#+END_SRC
* The rest
#+begin_src emacs-lisp
;; Show matching parens
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src
