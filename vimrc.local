if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set incsearch nohlsearch " do incremental searching without residual highlighting
set smartcase     " Case insensitive searches, until an uppercase letter is typed

" Undo highlighting of column 80 added by parent dotfiles
set colorcolumn=0
" Also the insertion of line breaks in insert mode by default
set textwidth=0

augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END

" Shortcut to refer to the directory of the current file
" From https://www.destroyallsoftware.com/file-navigation-in-vim.html
cnoremap %% <C-R>=expand('%:h').'/'<cr>

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.html
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>

let g:neoterm_default_mod = ":vertical"
let g:neoterm_term_per_tab = 1
let g:neoterm_autoscroll = 1

map <Leader><Leader>t :Ttoggle<CR>

tnoremap <Esc> <C-\><C-n>

tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l

" Automatically enter insert mode when switching into a terminal pane
autocmd BufWinEnter,WinEnter term://* startinsert
autocmd BufWinLeave,WinLeave term://* stopinsert

let test#strategy = "neoterm"
let g:test#preserve_screen = 1

let test#ruby#rspec#options = {
  \ 'nearest': '',
  \ 'file':    '',
  \ 'suite':   '--fail-fast',
\}

" By default assume that we want to target the current window in the current
" session for tslime commands, like test runs

let g:tslime_always_current_session=1
let g:tslime_always_current_window=1
let g:tmux_panenumber=2

let g:VimuxOrientation = "h"
let g:VimuxHeight = "40"

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>

" vim-ruby customisation


" Highlight Ruby operators
let ruby_operators = 1

let ruby_indent_block_style = 'do'

" vim-fold-rspec customisation

let g:fold_rspec_foldlevel = 3       " sets initial open/closed state of all folds (open unless nested more than two levels deep)
let g:fold_rspec_foldcolumn = 4      " shows a 4-character column on the lefthand side of the window displaying the document's fold structure
let g:fold_rspec_foldminlines = 3    " disables closing of folds containing two lines or fewer

" Use the old vim regex engine (version 1, as opposed to version 2, which was
" introduced in Vim 7.3.969). The Ruby syntax highlighting is significantly
" slower with the new regex engine.
"set re=1

" Colour scheme
let g:molokai_original=0
"let g:rehash256 = 1
colorscheme molokai

" Ruby mode for .thor and .etl files
au BufRead,BufNewFile *.thor set filetype=ruby
au BufNewFile,BufRead *.etl set filetype=ruby
au BufNewFile,BufRead *.jbuilder set filetype=ruby
au BufNewFile,BufRead *.axlsx set filetype=ruby

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" jk in rapid succession will bring you out of insert mode
inoremap jk <esc>
cnoremap jk <c-c>
tnoremap jk <C-\><C-n>

vnoremap v <esc>

" Quick save shortcut
noremap <Leader>f :update<CR>

" Quick tab switching
nnoremap H gT
nnoremap L gt

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Toggle hard mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

let g:ag_prg="rg --vimgrep"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc#L202
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr><Paste>

" Configure custom shortcuts for moving between git hunks
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

set updatetime=100

" Set up bindings for adding blank lines before/after current line
nnoremap <silent>[<Space> :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <silent>]<Space> :set paste<CR>m`o<Esc>``:set nopaste<CR>

map y <Plug>(highlightedyank)

" Recommended configuration for EditorConfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

let g:sneak#label = 1

map <leader>v :Tmux approvals verify<cr>
map <leader>vy :Tmux y<cr>
map <leader>vn :Tmux n<cr>

map <C-n> :NERDTreeToggle<CR>

let g:SuperTabDefaultCompletionType = "<c-n>"

let g:nv_search_paths = ['~/Dropbox/notes', './notes.md']

nnoremap <silent> <leader>n :NV<CR>

nnoremap <leader>b :Buffers<CR>

com! FormatXML :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"

let g:ale_fixers = {
\   'python': [
\       'autopep8',
\       'isort',
\   ],
\}

let g:ale_fix_on_save = 1

function! s:IsFirenvimActive(event) abort
  if !exists('*nvim_get_chan_info')
    return 0
  endif
  let l:ui = nvim_get_chan_info(a:event.chan)
  return has_key(l:ui, 'client') && has_key(l:ui.client, 'name') &&
      \ l:ui.client.name =~? 'Firenvim'
endfunction

function! OnUIEnter(event) abort
  if s:IsFirenvimActive(a:event)
    set laststatus=0
    set lines=30
  endif
endfunction
autocmd UIEnter * call OnUIEnter(deepcopy(v:event))

au BufEnter github.com_*.txt set filetype=markdown

" firenvim should not take over textarea elements automaticaly, and should
" only target basic textareas (not e.g. Gmail)
let g:firenvim_config = {
    \ 'globalSettings': {
        \ 'alt': 'all',
    \  },
    \ 'localSettings': {
        \ '.*': {
            \ 'cmdline': 'neovim',
            \ 'content': 'text',
            \ 'priority': 0,
            \ 'selector': 'textarea',
            \ 'takeover': 'always',
        \ },
    \ }
\ }

let fc = g:firenvim_config['localSettings']
let fc['.*'] = { 'takeover': 'never', 'selector': 'textarea' }

set rtp+=/opt/homebrew/opt/fzf
